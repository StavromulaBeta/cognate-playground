Def Drop as ( Let X );

Def Swap as ( Let X ; Let Y ; Y X );

Def Do as ( Def F ; F );

Def Any? ( True Drop );
Def Twin as (Let X ; X X);
Def Triplet as (Twin ; Twin);

Def When as (
	Let Cond;
	Let Block;
	Do If Cond then Block else ();
);

Def Unless as ( When Not );

Def While (
	Let Condition;
	Let Block;
	Let Result be Do Condition;
	When Result then ( Do Block ; While Condition Block )
);

Def Until (
	Let Condition;
	Let Block;
	Let Result be Do Condition;
	When Not Result then ( Do Block ; While Condition Block ) else ()
);

Def Times (
	Let I be Of (Integer?);
	Def B;

	(
		I;
		While (Twin ;> 0) (
			Let I;
			B;
			- 1 I;
		);
		Drop;
	)
);


~~ Def With (
~~ 	Let Fp be Open;
~~ 	Do Swap Fp;
~~ 	Close Fp
~~ );


Def Reverse (
	Fold ( Push ) from Empty over List!;
);


Def For (
	~~ Tail recursive;
	Let L;
	Let B;
	When Not Empty? L (
		Do B First L;
		For each in Rest L do B;
	)
);

Def Fold (
	Let B;
	Let I;
	Let L;
	I ; For each in L do B;
);

Def Puts ( Put Fold ( Join Show ) from "" over Reverse List);
Def Prints ( Print Fold ( Join Show ) from "" over Reverse List);

Def Filter (
	Def Predicate;
	Let L;
    Empty;
	For each in L (
		Let I;
		Let R be Predicate I;
		When R ( Push I );
	);
	Reverse;
);

Def Min as (
	Let A;
	Let B;
	If < A B then B else A;
);

Def Max as (
	Let A;
	Let B;
	If < A B then A else B;
);

Def Take-while (
	Def P;
	Let L;
	Def H as (
		Let L;
		Unless Empty? L (
			Let F be First L;
			Let R be P of F;
			When R then (
				Push F;
				H Rest L
			)
		)
	);
	Reverse H L Empty;
);

Def All (
	Let P;
	Let L;
	Do If Empty? L then ( True )
	else (
		Do If Do P on First L
			then ( All P of Rest of L )
			else ( False )
	)
);

Def None ( ~~ Opposite of All
	Def P;
	Let L;
	All ( Not P ) of L;
);

Def Append (
	Let L2;
	Let L1;
	L2;
	For each in Reverse L1 (
		Push;
	)
);

Def Prepend ( Swap ; Append );

Def Case as (
	Def Pred;
	Def If-true;
	Def If-false;
	(
		Let X;
		Let B be Pred X;
		Do If B then (If-true X) else (If-false X)
	);
);

Def Sort
	Case (Empty?) ()
	else (
		Let L;
		Let Pivot be First of L;
		Sort Filter (<  Pivot) L;
		Sort Filter (>= Pivot) Rest of L;
		Push Pivot;
		Append
	);

Def Map (
	Def Pred;
	Let L be a List!;

	Do If Empty? L ( L )
	else (
		Let X be First of L;
		Let Res be Pred X;

		return Push Res to Map (Pred) over Rest of L;
	);
);

Def Discard (
	Let N be Of (Integer?);
	Do Times N (
		Let L;
		When Empty? L ( Error "Cannot Discard more elements than in list" );
		get Rest of L;
	) starting with List!
);

Def Take (
	Let N be Of (Integer?);
	Let Li be List!;

	Reverse List (
		Do Times N (
			Let L;
			When Empty? L ( Error "Cannot Take more elements than in list" );
			First L;
			Rest L;
		) starting with Li;
		Drop
	)
);

Def Length (
	Let L be List!;
	Do If Empty? L then ( 0 ) else ( Length of the Rest of L ; + 1 )
);

Def Index (
	Let N be Of (Integer?);
	Let L be List!;

	When < 0 N ( Error Join "Invalid index " Show N );

	Do If Zero? N ( return First element of L )
	else (
		When Empty? L ( Error "Index is beyond end of list" );
		Index - 1 N of Rest of L
	);
);

Def Range (
	Let Start be Number!;
	Let End be Number!;

	When > End Start
	(
		Error Join Join Join "Invalid range " Show Start "..." Show End;
	);

	Reverse List (
		Start;
		While (Triplet ; < End) ( + 1 );
		Drop; Drop;
	)
);

Def Assert (
	Let Assertion be String!;
	Let Result be Boolean!;

	Unless Result ( Error Join Join "Failed assertion: '" Assertion "'" );
);

Def Of as (
	Def Predicate;
	Let X;
	Let Result be Predicate X;
	Unless Result ( Error "Predicate failed" );
	X;
);
