Def Drop as (Let X);

Def Baz as (
	Let Z;
	(Do Z);
);


Def Bar as (
	Let Y;
	Baz (Do Y);
);

Def Foo as (
	Let X;
	Bar (Print X);
);


Foo "PASS: Implicit block copying";
Foo "FAIL: Implicit block copying";
Drop; Do;


Let Y be Box ();

Def Foo2 as (
	Let X;
	Set Y to (Print X);
);


Foo2 "PASS: Implicit block copying with mutation"; Let Z be Unbox Y;
Foo2 "FAIL: Implicit block copying with mutation"; Let W be Unbox Y;
Do Z;
Drop W;

Def A as (
	Let B;
	Let Foo as (Print B);
	return (Do Foo);
);

Do A "PASS: Another block copying test";

Def B as (
	Let B;
	Def Foo as (Print B);
	return (Foo);
);

Do B "PASS: Another block copying test again";

"PASS: Closure loading 2";
"PASS: Closure loading 1";

Do (
	Let X;
	Let Y;
	Do If True
		then ( Print X ; Print Y )
		else ( )
);

Let H be 5;
Let B1 be ( Print H );
Let B2 be ( Print H );

Print If != B1 B2
	"PASS: Comparing different blocks"
else
	"FAIL: Comparing different blocks";

Print If == B1 B1
	"PASS: Comparing the same block"
else
	"FAIL: Comparing the same block";
